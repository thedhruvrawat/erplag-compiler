<program> = <moduleDeclarations> <otherModules> <driverModule> <otherModules> 
<moduleDeclarations> = <moduleDeclaration> <moduleDeclarations>
<moduleDeclarations> = e
<moduleDeclaration> = DECLARE MODULE ID SEMICOL
<otherModules> = <module>  <otherModules>
<otherModules> = e
<driverModule> = DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module> = DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret> <moduleDef>
<ret> = RETURNS SQBO <output_plist> SQBC SEMICOL
<ret> = e 
<input_plist> = ID COLON <dataType> <N1>
<N1> = COMMA ID COLON <dataType> <N1> 
<N1> = e 
<output_plist> = ID COLON <type> <N2>
<N2> = COMMA ID COLON <type> <N2>
<N2> = e
<dataType> = INTEGER
<dataType> = REAL
<dataType> = BOOLEAN
<dataType> = ARRAY SQBO <range_arrays> SQBC OF <type>
<range_arrays> = <index_arr> RANGEOP <index_arr>
<index_arr> = <sign> <new_index>
<new_index> = NUM
<new_index> = ID
<sign> = PLUS
<sign> = MINUS
<sign> = e 
<type> = INTEGER
<type> = REAL
<type> = BOOLEAN
<moduleDef> = START <statements> END
<statements> = <statement> <statements>
<statements> = e 
<statement> = <ioStmt>
<statement> = <simpleStmt>
<statement> = <declareStmt>
<statement> = <conditionalStmt>
<statement> = <iterativeStmt>
<ioStmt> = GET_VALUE BO ID BC SEMICOL
<ioStmt> = PRINT BO <var_print> BC SEMICOL
<boolConstt> = TRUE
<boolConstt> = FALSE
<id_num_rnum> = ID
<id_num_rnum> = NUM 
<id_num_rnum> = RNUM
<var_print> = <boolConstt>
<var_print> = ID <P1>
<var_print> = NUM
<var_print> = RNUM
<P1> = SQBO <index_arr> SQBC 
<P1> = e 
<simpleStmt> = <assignmentStmt> 
<simpleStmt> = <moduleReuseStmt> 
<assignmentStmt> = ID <whichStmt>
<whichStmt> = <lvalueIDStmt> 
<whichStmt> = <lvalueARRStmt> 
<lvalueIDStmt> = ASSIGNOP <expression> SEMICOL 
<lvalueARRStmt> = SQBO <element_index_with_expressions> SQBC ASSIGNOP <expression> SEMICOL 
<moduleReuseStmt> = <optional> USE MODULE ID WITH PARAMETERS <actual_para_list> SEMICOL 
<actual_para_list> = MINUS <N_13>
<N_13> = NUM <N_12>
<N_13> = RNUM <N_12>
<N_13> = ID <N_11> <N_12>
<actual_para_list> = NUM <N_12>
<actual_para_list> = RNUM <N_12>
<actual_para_list> = <boolConstt> <N_12>
<actual_para_list> = ID <N_11> <N_12>
<N_12> = COMMA <actual_para_list>
<N_12> = e
<optional> = SQBO <idList> SQBC ASSIGNOP
<optional> = e 
<idList> = ID <N3>
<N3> = COMMA ID <N3>
<N3> = e 
<expression> = <arithmeticOrBooleanExpr> 
<expression> = <U>
<U> = <unary_op> <new_NT>
<new_NT> = BO <arithmeticExpr> BC 
<new_NT> = <id_num_rnum>
<unary_op> = PLUS
<unary_op> = MINUS 
<arithmeticOrBooleanExpr> = <AnyTerm> <N7>
<N7> = <logicalOp> <AnyTerm> <N7>
<N7> = e 
<AnyTerm> = <arithmeticExpr> <N8> 
<AnyTerm> = <boolConstt> <N8>
<N8> = <relationalOp> <arithmeticExpr> <N8> 
<N8> = e 
<arithmeticExpr> = <term> <N4>
<N4> = <op1> <term> <N4>
<N4> = e 
<term> = <factor> <N5>
<N5> = <op2> <factor> <N5> 
<N5> = e 
<factor> = BO <arithmeticExpr> BC 
<factor> = NUM
<factor> = RNUM
<factor> = ID <N_11>
<N_11> = SQBO <element_index_with_expressions> SQBC
<N_11> = e 
<arrExpr> = <arrTerm> <arr_N4> 
<arr_N4> = <op1> <arrTerm> <arr_N4> 
<arr_N4> = e 
<arrTerm> = <arrFactor> <arr_N5>
<arr_N5> = <op2> <arrFactor> <arr_N5> 
<arr_N5> = e 
<arrFactor> = ID
<arrFactor> = NUM
<arrFactor> = <boolConstt> 
<arrFactor> = BO <arrExpr> BC 
<element_index_with_expressions> = <sign> <N_10>
<N_10> = <new_index>
<N_10> = BO <arrExpr> BC 
<op1> = PLUS 
<op1> = MINUS 
<op2> = MUL 
<op2> = DIV 
<logicalOp> = AND 
<logicalOp> = OR 
<relationalOp> = LT
<relationalOp> = LE
<relationalOp> = GT
<relationalOp> = GE
<relationalOp> = EQ
<relationalOp> = NE
<declareStmt> = DECLARE <idList> COLON <dataType> SEMICOL 
<conditionalStmt> = SWITCH BO ID BC START <caseStmts> <default> END 
<caseStmts> = CASE <value> COLON <statements> BREAK SEMICOL <N9>
<N9> = CASE <value> COLON <statements> BREAK SEMICOL <N9>
<N9> = e 
<value> = NUM 
<value> = TRUE 
<value> = FALSE 
<default> = DEFAULT COLON <statements> BREAK SEMICOL 
<default> = e 
<iterativeStmt> = FOR BO ID IN <range_for_loop> BC START <statements> END 
<iterativeStmt> = WHILE BO <arithmeticOrBooleanExpr> BC START <statements> END 
<range_for_loop> = <index_for_loop> RANGEOP <index_for_loop>
<index_for_loop> = <sign_for_loop> <new_index_for_loop> 
<new_index_for_loop> = NUM 
<sign_for_loop> = PLUS
<sign_for_loop> = MINUS
<sign_for_loop> = e 