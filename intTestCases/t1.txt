**returns index at which element is found or -1 if element not found**
<<module binarySearch>>
takes input[m: integer, A: array[1..5] of integer, x: integer];
returns [index: integer];
start
    **   array once inside function to check if it is reveived correctly**
    print(A);

    declare l o: integer;  ** ERROR **
    declare hi: integer;
    declare mid: integer;
    declare flag : boolean;

    declare b : integer;
    b := 1;

    index == -(b); ** ERROR **

    lo := 1;
    hi := m;

    while(lo <= hi)
    start
        mid := (lo + hi)/2;
        
        flag := x == A[mid];
        print(flag);
        switch (flag)
        start
            case true : 
                index := mid;
                lo := hi+1;
                        break;
            case false :
                br eak; ** ERROR **
        end

        flag := x < A[mid];
        switch(flag)
        start
            case true : 
                        hi := mid - 1;
                        break;
            case false :
                        break;
        end

        flag := x > A[mid];
        switch(flag)
        start
            case true : 
                        lo := mid + 1;
                        break;  
            case false :
                        break;
        end
    end
end

<<<driver program>>>
start
    declare m: integer;     **size of array**
    m := 5;
    **get_value(m);**
	declare A: array [1..while] of integer; ** ERROR **

    **insert array in sorted order (I am not gonna write mergesort in ERPLAG, it is not as easy as C++)**
    ** Refer: https://github.com/vismit2000/compCode-II/blob/master/CompCode%20-%20I.docx for simple code of merge sort in CPP**

	get_value(A);

    declare search: integer;
    **Enter element to search**
    get_value(search);

    declare idx : integer;
    [idx] := use module binarySearch with parameters m, A, search;	
    print(idx);
end