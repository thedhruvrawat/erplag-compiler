** This testcase demonstrates correctness of module structure with declaration and simple statements**
<<<driver program>>>
																			**ERROR 1**
	declare v_1_2_3:integer;
	get_value(v_1_2_3)															**ERROR 2**
	declare result_::integer;														**ERROR 3**
	[result_]:=use module square with parameters 1.2, A[k++], -2, - j, -A[v], _1_2_3; 					**ERROR 4**
        ** Modify rule for <actual_para_list>**
	print(result)));																**ERROR 5**
end

<<module square>>
takes input [x:integer;																**ERROR 6**
returns [value:integer];
start
	value:= x*x;
	get_value :== input();															**ERROR 7**
end

<<module square>>>>																**ERROR 8**
takes input [x:integer;																**ERROR 0**
returnss [value:integer];															**ERROR 10**
start
	value:= x*x;
	get_value :== input();															**ERROR 11**
end

**notice that this test case does not declare the module before the driver module, still it is syntactically correct as moduleDeclarations is optional. Testing whether a module is declared before its use is a matter of semantic analysis**

** test the correctness of all lexemes and parse tree created
and print the following message on successful compilation on the console
      " Input source code is syntactically correct.........."
**
*																			**ERROR 12**
Modification for the rule for actual parameters list

<actual_para_list> --> <actual_para_list> COMMA <K> | <K> | <sign> <K>
<K> --> NUM | RNUM | <boolConstt> | ID <N_11> 
<N_11> --> SQBO <element_index_with_expression> SQBC | epsilon

Resolve the left recursion in the above rules. 

**
**make sure to produce only relevant output of your compiler code...
Also remove all unnecessary printf statements and make the code more professional before submitting**
